{"version":3,"file":"mpesa-plugin.min.js","sources":["../src/mpesa-plugin.ts"],"sourcesContent":["import { h, render, Component, VNode, ComponentType } from \"preact\";\r\nimport axios from \"axios\";\r\nimport \"./styles.css\";\r\n\r\n// Types\r\nexport interface MpesaConfig {\r\n  apiKey: string;\r\n  apiEndpoint: string;\r\n  onSuccess?: (response: PaymentResponse) => void;\r\n  onError?: (error: Error) => void;\r\n  ui?: {\r\n    primaryColor?: string;\r\n    secondaryColor?: string;\r\n    backgroundColor?: string;\r\n    textColor?: string;\r\n    borderRadius?: string;\r\n    fontFamily?: string;\r\n    buttonStyle?: \"rounded\" | \"square\" | \"pill\";\r\n    modalWidth?: string;\r\n    showLogo?: boolean;\r\n    logoUrl?: string;\r\n    customStyles?: string;\r\n  };\r\n}\r\n\r\nexport interface PaymentModalProps {\r\n  isOpen: boolean;\r\n  amount: number;\r\n  narration: string;\r\n  onClose: () => void;\r\n  onSubmit: (phone: string) => Promise<void>;\r\n  ref?: (ref: PaymentModal | null) => void;\r\n  config?: MpesaConfig;\r\n}\r\n\r\nexport interface PaymentResponse {\r\n  transactionId: string;\r\n  status: string;\r\n  message: string;\r\n  resultCode?: string;\r\n  resultDesc?: string;\r\n}\r\n\r\ninterface ConfirmationResponse {\r\n  ResponseCode?: string;\r\n  ResponseDescription?: string;\r\n  MerchantRequestID?: string;\r\n  CheckoutRequestID?: string;\r\n  ResultCode?: string;\r\n  ResultDesc?: string;\r\n  errorCode?: string;\r\n  errorMessage?: string;\r\n}\r\n\r\ninterface PaymentModalState {\r\n  phone: string;\r\n  isSubmitting: boolean;\r\n  error: string;\r\n  isConfirming: boolean;\r\n  confirmationMessage: string;\r\n  isFullScreenLoading: boolean;\r\n  loadingStage: string;\r\n}\r\n\r\n// Add this class name generator\r\nfunction generateUniqueClassName(prefix: string): string {\r\n  const randomString = Math.random().toString(36).substring(2, 8);\r\n  return `${prefix}-${randomString}`;\r\n}\r\n\r\n// Create a class name manager\r\nclass ClassNameManager {\r\n  private classNames: { [key: string]: string } = {};\r\n\r\n  getClassName(key: string): string {\r\n    if (!this.classNames[key]) {\r\n      this.classNames[key] = generateUniqueClassName(\"mpesa\");\r\n    }\r\n    return this.classNames[key];\r\n  }\r\n\r\n  getClassNames(): { [key: string]: string } {\r\n    return { ...this.classNames };\r\n  }\r\n}\r\n\r\n// Payment Modal UI Component\r\nclass PaymentModal extends Component<PaymentModalProps, PaymentModalState> {\r\n  private classNameManager: ClassNameManager;\r\n\r\n  constructor(props: PaymentModalProps) {\r\n    super(props);\r\n    this.classNameManager = new ClassNameManager();\r\n    this.state = {\r\n      phone: \"\",\r\n      isSubmitting: false,\r\n      error: \"\",\r\n      isConfirming: false,\r\n      confirmationMessage: \"\",\r\n      isFullScreenLoading: false,\r\n      loadingStage: \"initial\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Create our custom styles\r\n    const style = document.createElement(\"style\");\r\n    const { config } = this.props;\r\n    const ui = config?.ui || {};\r\n\r\n    // Get all class names\r\n    const classes = this.classNameManager.getClassNames();\r\n\r\n    style.textContent = `\r\n      @keyframes spin {\r\n        0% { transform: rotate(0deg); }\r\n        100% { transform: rotate(360deg); }\r\n      }\r\n\r\n      .${classes.modal} {\r\n        font-family: ${ui.fontFamily || \"system-ui, -apple-system, sans-serif\"};\r\n      }\r\n\r\n      .${classes.modalContent} {\r\n        background-color: ${ui.backgroundColor || \"#FFFFFF\"};\r\n        color: ${ui.textColor || \"#1F2937\"};\r\n        border-radius: ${ui.borderRadius || \"0.5rem\"};\r\n        width: ${ui.modalWidth || \"90%\"};\r\n        max-width: ${ui.modalWidth || \"28rem\"};\r\n      }\r\n\r\n      .${classes.btnPrimary} {\r\n        background-color: ${ui.primaryColor || \"#3B82F6\"} !important;\r\n      }\r\n\r\n      .${classes.btnPrimary}:hover {\r\n        background-color: ${this.adjustColor(\r\n          ui.primaryColor || \"#3B82F6\",\r\n          -10\r\n        )} !important;\r\n      }\r\n\r\n      .${classes.btnSecondary} {\r\n        background-color: ${ui.secondaryColor || \"#4B5563\"} !important;\r\n      }\r\n\r\n      .${classes.btnSecondary}:hover {\r\n        background-color: ${this.adjustColor(\r\n          ui.secondaryColor || \"#4B5563\",\r\n          -10\r\n        )} !important;\r\n      }\r\n\r\n      .${classes.inputField} {\r\n        border-color: ${this.adjustColor(ui.primaryColor || \"#3B82F6\", 20)};\r\n      }\r\n\r\n      .${classes.inputField}:focus {\r\n        border-color: ${ui.primaryColor || \"#3B82F6\"};\r\n        box-shadow: 0 0 0 2px ${this.adjustColor(\r\n          ui.primaryColor || \"#3B82F6\",\r\n          80\r\n        )};\r\n      }\r\n\r\n      ${ui.customStyles || \"\"}\r\n    `;\r\n    document.head.appendChild(style);\r\n  }\r\n\r\n  private adjustColor(color: string, amount: number): string {\r\n    const hex = color.replace(\"#\", \"\");\r\n    const r = Math.max(\r\n      0,\r\n      Math.min(255, parseInt(hex.substr(0, 2), 16) + amount)\r\n    );\r\n    const g = Math.max(\r\n      0,\r\n      Math.min(255, parseInt(hex.substr(2, 2), 16) + amount)\r\n    );\r\n    const b = Math.max(\r\n      0,\r\n      Math.min(255, parseInt(hex.substr(4, 2), 16) + amount)\r\n    );\r\n    return `#${r.toString(16).padStart(2, \"0\")}${g\r\n      .toString(16)\r\n      .padStart(2, \"0\")}${b.toString(16).padStart(2, \"0\")}`;\r\n  }\r\n\r\n  // Expose method to update state\r\n  updateState = (newState: Partial<typeof this.state>) => {\r\n    this.setState(newState);\r\n  };\r\n\r\n  handleSubmit = async (e: Event) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      isSubmitting: true,\r\n      error: \"\",\r\n      isFullScreenLoading: true,\r\n      loadingStage: \"stk_push\",\r\n      confirmationMessage: \"Sending STK push request 1...\",\r\n    });\r\n\r\n    try {\r\n      await this.props.onSubmit(this.state.phone);\r\n      // Modal will be closed by the parent component after successful transaction\r\n    } catch (err) {\r\n      this.setState({\r\n        error: err instanceof Error ? err.message : \"Payment failed\",\r\n        isConfirming: false,\r\n        isFullScreenLoading: false,\r\n        loadingStage: \"initial\",\r\n      });\r\n    } finally {\r\n      this.setState({ isSubmitting: false });\r\n    }\r\n  };\r\n\r\n  handleCancel = () => {\r\n    // When user cancels, we should reject the promise\r\n    this.props.onClose();\r\n  };\r\n\r\n  render(): VNode<any> | null {\r\n    const { isOpen, amount, narration, onClose, config } = this.props;\r\n    const {\r\n      phone,\r\n      isSubmitting,\r\n      error,\r\n      isConfirming,\r\n      confirmationMessage,\r\n      isFullScreenLoading,\r\n      loadingStage,\r\n    } = this.state;\r\n    const classes = this.classNameManager.getClassNames();\r\n\r\n    if (!isOpen) return null;\r\n\r\n    return h(\r\n      \"div\",\r\n      {\r\n        class: classes.modal,\r\n      },\r\n      h(\r\n        \"div\",\r\n        {\r\n          class: classes.modalContent,\r\n        },\r\n        [\r\n          config?.ui?.showLogo &&\r\n            config?.ui?.logoUrl &&\r\n            h(\r\n              \"div\",\r\n              { class: \"flex justify-center mb-6\" },\r\n              h(\"img\", {\r\n                src: config.ui.logoUrl,\r\n                alt: \"Logo\",\r\n                class: \"h-12 object-contain\",\r\n              })\r\n            ),\r\n          isFullScreenLoading &&\r\n            (() => {\r\n              let message = \"\";\r\n              switch (loadingStage) {\r\n                case \"stk_push\":\r\n                  message = \"Sending STK push request...\";\r\n                  break;\r\n                case \"waiting\":\r\n                  message =\r\n                    \"Please check your phone for the STK push and complete the payment...\";\r\n                  break;\r\n                case \"confirming\":\r\n                  message = \"Confirming your payment...\";\r\n                  break;\r\n                default:\r\n                  message = confirmationMessage;\r\n              }\r\n              return h(\r\n                \"div\",\r\n                {\r\n                  class:\r\n                    \"absolute inset-0 bg-white bg-opacity-90 flex flex-col justify-center items-center z-[1000000] rounded-lg backdrop-blur-sm\",\r\n                },\r\n                [\r\n                  h(\"div\", {\r\n                    class:\r\n                      \"w-16 h-16 border-4 border-gray-200 border-t-blue-500 rounded-full animate-spin mb-4\",\r\n                  }),\r\n                  h(\r\n                    \"p\",\r\n                    {\r\n                      class:\r\n                        \"text-lg text-gray-800 text-center max-w-[80%] bg-white bg-opacity-90 p-3 rounded shadow-sm\",\r\n                    },\r\n                    message\r\n                  ),\r\n                ]\r\n              );\r\n            })(),\r\n          h(\"div\", { class: \"text-center mb-6\" }, [\r\n            h(\"h3\", { class: \"text-2xl font-bold mb-2\" }, \"Complete Payment\"),\r\n            h(\r\n              \"p\",\r\n              { class: \"text-gray-600\" },\r\n              \"Enter your phone number to proceed\"\r\n            ),\r\n          ]),\r\n          h(\"div\", { class: \"bg-gray-50 p-4 rounded-lg mb-6\" }, [\r\n            h(\"div\", { class: \"flex justify-between items-center mb-2\" }, [\r\n              h(\"span\", { class: \"text-gray-600\" }, \"Amount\"),\r\n              h(\r\n                \"span\",\r\n                { class: \"font-semibold text-lg\" },\r\n                `KES ${amount.toLocaleString()}`\r\n              ),\r\n            ]),\r\n            h(\"div\", { class: \"flex justify-between items-center\" }, [\r\n              h(\"span\", { class: \"text-gray-600\" }, \"Description\"),\r\n              h(\"span\", { class: \"font-medium\" }, narration),\r\n            ]),\r\n          ]),\r\n          h(\r\n            \"form\",\r\n            {\r\n              onSubmit: this.handleSubmit,\r\n              class: \"space-y-4\",\r\n            },\r\n            [\r\n              h(\"div\", null, [\r\n                h(\r\n                  \"label\",\r\n                  { class: \"block mb-2 text-sm font-medium text-gray-700\" },\r\n                  \"Phone Number\"\r\n                ),\r\n                h(\"input\", {\r\n                  type: \"tel\",\r\n                  value: phone,\r\n                  onChange: (e: Event) => {\r\n                    const target = e.target as HTMLInputElement;\r\n                    this.setState({ phone: target.value });\r\n                  },\r\n                  placeholder: \"254XXXXXXXXX\",\r\n                  required: true,\r\n                  class: classes.inputField,\r\n                }),\r\n                h(\r\n                  \"small\",\r\n                  { class: \"text-gray-500 text-sm mt-1 block\" },\r\n                  \"Format: 254XXXXXXXXX (include country code)\"\r\n                ),\r\n              ]),\r\n              error &&\r\n                h(\r\n                  \"div\",\r\n                  {\r\n                    class:\r\n                      \"bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg text-sm\",\r\n                  },\r\n                  error\r\n                ),\r\n              h(\r\n                \"div\",\r\n                {\r\n                  class: \"flex gap-3 justify-end mt-6\",\r\n                },\r\n                [\r\n                  h(\r\n                    \"button\",\r\n                    {\r\n                      type: \"button\",\r\n                      onClick: this.handleCancel,\r\n                      class: classes.btnSecondary,\r\n                    },\r\n                    \"Cancel\"\r\n                  ),\r\n                  h(\r\n                    \"button\",\r\n                    {\r\n                      type: \"submit\",\r\n                      disabled: isSubmitting,\r\n                      class: `${classes.btnPrimary} ${\r\n                        isSubmitting ? \"opacity-70 cursor-not-allowed\" : \"\"\r\n                      }`,\r\n                    },\r\n                    isSubmitting ? \"Processing...\" : \"Pay Now\"\r\n                  ),\r\n                ]\r\n              ),\r\n            ]\r\n          ),\r\n        ]\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\n// Core Plugin Logic\r\nclass MpesaPlugin {\r\n  private config: MpesaConfig;\r\n  private modalRoot: HTMLDivElement;\r\n  private state: {\r\n    modalOpen: boolean;\r\n    amount: number;\r\n    narration: string;\r\n  };\r\n  private currentPromise: { resolve: Function; reject: Function } | null = null;\r\n  private modalComponent: PaymentModal | null = null;\r\n  private classNameManager: ClassNameManager;\r\n\r\n  constructor(config: MpesaConfig) {\r\n    this.config = config;\r\n    this.modalRoot = document.createElement(\"div\");\r\n    document.body.appendChild(this.modalRoot);\r\n    this.state = {\r\n      modalOpen: false,\r\n      amount: 0,\r\n      narration: \"\",\r\n    };\r\n    this.classNameManager = new ClassNameManager();\r\n  }\r\n\r\n  private showModal(amount: number, narration: string): void {\r\n    this.state.modalOpen = true;\r\n    this.state.amount = amount;\r\n    this.state.narration = narration;\r\n    this.renderModal();\r\n  }\r\n\r\n  private hideModal(): void {\r\n    this.state.modalOpen = false;\r\n    this.renderModal();\r\n  }\r\n\r\n  private renderModal(): void {\r\n    render(\r\n      h(PaymentModal, {\r\n        ref: (ref: PaymentModal | null) => {\r\n          this.modalComponent = ref;\r\n        },\r\n        isOpen: this.state.modalOpen,\r\n        amount: this.state.amount,\r\n        narration: this.state.narration,\r\n        onClose: () => this.hideModal(),\r\n        onSubmit: (phone: string) => this.processPayment(phone),\r\n        config: this.config,\r\n      }),\r\n      this.modalRoot\r\n    );\r\n  }\r\n\r\n  // Validate phone number format\r\n  private validatePhone(phone: string): boolean {\r\n    return /^254\\d{9}$/.test(phone);\r\n  }\r\n\r\n  // Format phone number\r\n  private formatPhone(phone: string): string {\r\n    return phone.replace(/[^0-9]/g, \"\");\r\n  }\r\n\r\n  private async pollTransactionStatus(\r\n    checkoutRequestId: string\r\n  ): Promise<ConfirmationResponse> {\r\n    const maxAttempts = 30; // Maximum 1 minute of polling (30 * 2 seconds)\r\n    let attempts = 0;\r\n\r\n    while (attempts < maxAttempts) {\r\n      try {\r\n        const response = await axios.post<ConfirmationResponse>(\r\n          this.config.apiEndpoint + \"/api/pesa/confirmation\",\r\n          {\r\n            CheckoutRequestID: checkoutRequestId,\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"API-KEY\": this.config.apiKey,\r\n              \"GRANT-TYPE\": \"api\",\r\n            },\r\n          }\r\n        );\r\n\r\n        const data = response.data;\r\n\r\n        // If we get a final response (success, timeout, or cancellation)\r\n        if (data.ResponseCode === \"0\" && data.ResultCode) {\r\n          return data;\r\n        }\r\n\r\n        // If still processing, wait and continue polling\r\n        await new Promise((resolve) => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n        attempts++;\r\n        continue;\r\n      } catch (error) {\r\n        if (axios.isAxiosError(error)) {\r\n          // Handle 500 status code with \"transaction is being processed\" error\r\n          if (\r\n            error.response?.status === 500 &&\r\n            error.response?.data?.errorCode === \"500.001.1001\"\r\n          ) {\r\n            await new Promise((resolve) => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n            attempts++;\r\n            continue;\r\n          }\r\n          throw new Error(error.response?.data?.message || error.message);\r\n        }\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    throw new Error(\"Transaction status check timed out\");\r\n  }\r\n\r\n  // Process payment\r\n  private async processPayment(phone: string): Promise<void> {\r\n    const formattedPhone = this.formatPhone(phone);\r\n    if (!this.validatePhone(formattedPhone)) {\r\n      throw new Error(\"Invalid phone number format. Use format: 254712345678\");\r\n    }\r\n\r\n    try {\r\n      // Update modal to show STK push state\r\n      if (this.modalComponent) {\r\n        this.modalComponent.updateState({\r\n          isFullScreenLoading: true,\r\n          loadingStage: \"stk_push\",\r\n          confirmationMessage: \"Sending STK push request...\",\r\n        });\r\n      }\r\n\r\n      // Initiate STK push\r\n      const stkResponse = await axios.post<{\r\n        transactionId: string;\r\n      }>(\r\n        this.config.apiEndpoint + \"/api/pesa/stk_push\",\r\n        {\r\n          amount: this.state.amount,\r\n          phoneNumber: formattedPhone,\r\n          narration: this.state.narration,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"API-KEY\": this.config.apiKey,\r\n            \"GRANT-TYPE\": \"api\",\r\n          },\r\n        }\r\n      );\r\n\r\n      // Get the MerchantRequestID (transactionId) from STK response\r\n      const transactionId = stkResponse.data.transactionId;\r\n      if (!transactionId) {\r\n        throw new Error(\"An Error Occured please try Again later.\");\r\n      }\r\n\r\n      // Update modal to show waiting state\r\n      if (this.modalComponent) {\r\n        this.modalComponent.updateState({\r\n          loadingStage: \"waiting\",\r\n          confirmationMessage:\r\n            \"Please check your phone for the STK push and complete the payment...\",\r\n        });\r\n      }\r\n\r\n      // Add a delay before starting confirmation polling\r\n      await new Promise((resolve) => setTimeout(resolve, 3000));\r\n\r\n      // Update modal to show confirming state\r\n      // if (this.modalComponent) {\r\n      //   this.modalComponent.updateState({\r\n      //     loadingStage: \"confirming\",\r\n      //     confirmationMessage: \"Confirming your payment...\",\r\n      //   });\r\n      // }\r\n\r\n      // Poll for transaction status using the MerchantRequestID\r\n      const confirmationResponse = await this.pollTransactionStatus(\r\n        transactionId\r\n      );\r\n\r\n      // Prepare final response\r\n      const finalResponse: PaymentResponse = {\r\n        transactionId: transactionId,\r\n        status: confirmationResponse.ResultCode === \"0\" ? \"success\" : \"failed\",\r\n        message: confirmationResponse.ResultDesc || \"Transaction completed\",\r\n        resultCode: confirmationResponse.ResultCode,\r\n        resultDesc: confirmationResponse.ResultDesc,\r\n      };\r\n\r\n      if (this.config.onSuccess) {\r\n        this.config.onSuccess(finalResponse);\r\n      }\r\n\r\n      // Only close modal if transaction was successful\r\n      if (confirmationResponse.ResultCode === \"0\") {\r\n        // Reset loading state before closing modal\r\n        if (this.modalComponent) {\r\n          this.modalComponent.updateState({\r\n            isFullScreenLoading: false,\r\n            loadingStage: \"initial\",\r\n          });\r\n        }\r\n        this.hideModal();\r\n      } else {\r\n        // For failed transactions, show error in the form\r\n        if (this.modalComponent) {\r\n          this.modalComponent.updateState({\r\n            isFullScreenLoading: false,\r\n            loadingStage: \"initial\",\r\n            error: confirmationResponse.ResultDesc || \"Transaction failed\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error: unknown) {\r\n      let errorMessage = \"Unknown error occurred\";\r\n\r\n      if (axios.isAxiosError(error)) {\r\n        errorMessage = error.response?.data?.message || error.message;\r\n      } else if (error instanceof Error) {\r\n        errorMessage = error.message;\r\n      }\r\n\r\n      // Update modal to show error state\r\n      if (this.modalComponent) {\r\n        this.modalComponent.updateState({\r\n          isFullScreenLoading: false,\r\n          loadingStage: \"initial\",\r\n          error: errorMessage,\r\n          isSubmitting: false,\r\n        });\r\n      }\r\n\r\n      if (this.config.onError) {\r\n        this.config.onError(\r\n          error instanceof Error ? error : new Error(errorMessage)\r\n        );\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Process payment without UI\r\n  async processDirectPayment(\r\n    amount: number,\r\n    phone: string,\r\n    narration: string\r\n  ): Promise<PaymentResponse> {\r\n    const formattedPhone = this.formatPhone(phone);\r\n    if (!this.validatePhone(formattedPhone)) {\r\n      throw new Error(\"Invalid phone number format. Use format: 254712345678\");\r\n    }\r\n\r\n    try {\r\n      // Initiate STK push\r\n      const stkResponse = await axios.post<{\r\n        transactionId: string;\r\n      }>(\r\n        this.config.apiEndpoint + \"/api/pesa/stk_push\",\r\n        {\r\n          amount: amount,\r\n          phoneNumber: formattedPhone,\r\n          narration: narration,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"API-KEY\": this.config.apiKey,\r\n            \"GRANT-TYPE\": \"api\",\r\n          },\r\n        }\r\n      );\r\n\r\n      // Get the MerchantRequestID (transactionId) from STK response\r\n      const transactionId = stkResponse.data.transactionId;\r\n      if (!transactionId) {\r\n        throw new Error(\"An Error Occurred please try Again later.\");\r\n      }\r\n\r\n      // Add a delay before starting confirmation polling\r\n      await new Promise((resolve) => setTimeout(resolve, 3000));\r\n\r\n      // Poll for transaction status using the MerchantRequestID\r\n      const confirmationResponse = await this.pollTransactionStatus(\r\n        transactionId\r\n      );\r\n\r\n      // Prepare final response\r\n      const finalResponse: PaymentResponse = {\r\n        transactionId: transactionId,\r\n        status: confirmationResponse.ResultCode === \"0\" ? \"success\" : \"failed\",\r\n        message: confirmationResponse.ResultDesc || \"Transaction completed\",\r\n        resultCode: confirmationResponse.ResultCode,\r\n        resultDesc: confirmationResponse.ResultDesc,\r\n      };\r\n\r\n      if (this.config.onSuccess) {\r\n        this.config.onSuccess(finalResponse);\r\n      }\r\n\r\n      return finalResponse;\r\n    } catch (error: unknown) {\r\n      let errorMessage = \"Unknown error occurred\";\r\n\r\n      if (axios.isAxiosError(error)) {\r\n        errorMessage = error.response?.data?.message || error.message;\r\n      } else if (error instanceof Error) {\r\n        errorMessage = error.message;\r\n      }\r\n\r\n      if (this.config.onError) {\r\n        this.config.onError(\r\n          error instanceof Error ? error : new Error(errorMessage)\r\n        );\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Initialize payment\r\n  async pay(amount: number, narration: string): Promise<PaymentResponse> {\r\n    return new Promise((resolve, reject) => {\r\n      this.currentPromise = { resolve, reject };\r\n      this.showModal(amount, narration);\r\n\r\n      // Override the success callback to resolve the promise\r\n      const originalSuccess = this.config.onSuccess;\r\n      this.config.onSuccess = (response) => {\r\n        if (originalSuccess) {\r\n          originalSuccess(response);\r\n        }\r\n        resolve(response);\r\n      };\r\n\r\n      // Override the error callback to reject the promise\r\n      const originalError = this.config.onError;\r\n      this.config.onError = (error) => {\r\n        if (originalError) {\r\n          originalError(error);\r\n        }\r\n        reject(error);\r\n      };\r\n\r\n      // Override the close callback to reject the promise with a cancellation error\r\n      if (this.modalComponent) {\r\n        const originalClose = this.modalComponent.props.onClose;\r\n        this.modalComponent.props.onClose = () => {\r\n          if (originalClose) {\r\n            originalClose();\r\n          }\r\n          this.hideModal();\r\n          reject(new Error(\"Payment cancelled by user\"));\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  // Clean up when plugin is no longer needed\r\n  destroy(): void {\r\n    if (this.modalRoot && this.modalRoot.parentNode) {\r\n      this.modalRoot.parentNode.removeChild(this.modalRoot);\r\n    }\r\n  }\r\n\r\n  // Add method to get class names\r\n  getClassNames(): { [key: string]: string } {\r\n    return this.classNameManager.getClassNames();\r\n  }\r\n}\r\n\r\n// Expose to global scope\r\ndeclare global {\r\n  interface Window {\r\n    MpesaPlugin: typeof MpesaPlugin;\r\n  }\r\n}\r\n\r\n// Expose to window object\r\nif (typeof window !== \"undefined\") {\r\n  window.MpesaPlugin = MpesaPlugin;\r\n}\r\n"],"names":["ClassNameManager","constructor","this","classNames","getClassName","key","Math","random","toString","substring","getClassNames","PaymentModal","Component","props","super","updateState","newState","setState","handleSubmit","async","e","preventDefault","isSubmitting","error","isFullScreenLoading","loadingStage","confirmationMessage","onSubmit","state","phone","err","Error","message","isConfirming","handleCancel","onClose","classNameManager","componentDidMount","style","document","createElement","config","ui","classes","textContent","modal","fontFamily","modalContent","backgroundColor","textColor","borderRadius","modalWidth","btnPrimary","primaryColor","adjustColor","btnSecondary","secondaryColor","inputField","customStyles","head","appendChild","color","amount","hex","replace","r","max","min","parseInt","substr","g","b","padStart","render","isOpen","narration","h","class","_a","showLogo","_b","logoUrl","src","alt","toLocaleString","type","value","onChange","target","placeholder","required","onClick","disabled","MpesaPlugin","currentPromise","modalComponent","modalRoot","body","modalOpen","showModal","renderModal","hideModal","ref","processPayment","validatePhone","test","formatPhone","pollTransactionStatus","checkoutRequestId","attempts","data","axios","post","apiEndpoint","CheckoutRequestID","headers","apiKey","ResponseCode","ResultCode","Promise","resolve","setTimeout","isAxiosError","response","status","_c","errorCode","_e","_d","formattedPhone","transactionId","phoneNumber","confirmationResponse","finalResponse","ResultDesc","resultCode","resultDesc","onSuccess","errorMessage","onError","processDirectPayment","pay","reject","originalSuccess","originalError","originalClose","destroy","parentNode","removeChild","window"],"mappings":"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"}